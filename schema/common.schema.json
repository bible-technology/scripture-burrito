{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://burrito.bible/schema/common.schema.json",
    "title": "Common Definitions",
    "description": "Common definitions for use by other parts of the schema.",
    "definitions": {
        "url": {
            "$$target": "common.schema.json#/definitions/url",
            "title": "URL Definition",
            "type": "string",
            "format": "uri",
            "pattern": "^(https?|ftp)://[^\\s/$.?#].[^\\s]*$",
            "minLength": 1,
            "description": "A valid **Uniform Resource Locator**.",
            "examples": ["https://example.com"]
        },
        "xToken": {
            "$$target": "common.schema.json#/definitions/xToken",
            "title": "xToken",
            "type": "string",
            "pattern": "^x-[a-z][A-za-z0-9]*$",
            "description": "User-defined token, prefixed with x-"
        },
        "bareId": {
            "$$target": "common.schema.json#/definitions/bareId",
            "title": "Bare Identifier",
            "type": "string",
            "pattern": "^\\S+$",
            "description": "Opaque system-specific identifier, without prefix."
        },
        "prefixedId": {
            "$$target": "common.schema.json#/definitions/prefixedId",
            "title": "Prefixed Identifer",
            "type": "string",
            "pattern": "^[0-9a-zA-Z][0-9a-zA-Z\\-]{1,31}::\\S+$",
            "description": "Opaque system-specific identifier, prefixed with the name of the system as declared in idServers."
        },
        "revisionString": {
            "$$target": "common.schema.json#/definitions/revisionString",
            "title": "Revision",
            "type": "string",
            "pattern": "^[0-9A-Za-z]([0-9A-Za-z_.:\\-]{0,62}[0-9A-Za-z])?$",
            "description": "Opaque system-specific revision identifier."
        },
        "languageTag": {
            "$$target": ["common.schema.json#/definitions/languageTag", "#/definitions/languageTag"],
            "title": "Language Tag",
            "type": "string",
            "pattern": "^[A-Za-z]{2,3}([\\-_][A-Za-z0-9]+){0,4}$",
            "minLength": 2,
            "description": "A valid IETF language tag as specified by BCP 47."
        },
        "countryCode": {
            "$$target": "common.schema.json#/definitions/countryCode",
            "title": "Country Code",
            "type": "string",
            "pattern": "^[A-Z][A-Z]$",
            "minLength": 2,
            "maxLength": 2,
            "description": "The upper-case ISO 3166-2 code for the country."
        },
        "rodCode": {
            "$$target": "common.schema.json#/definitions/rodCode",
            "title": "Registry of Dialects Code",
            "type": "string",
            "pattern": "^[0-9]{5}$",
            "minLength": 5,
            "maxLength": 5,
            "description": "A five-digit code from the Registry of Dialects."
        },
        "trimmedText": {
            "$$target": ["common.schema.json#/definitions/trimmedText", "#/definitions/trimmedText"],
            "title": "Trimmed Text",
            "type": "string",
            "pattern": "^\\S(.*\\S)?$",
            "description": "A string without surrounding whitespace characters."
        },
        "localizedText": {
            "$$target": "common.schema.json#/definitions/localizedText",
            "title": "Localized Text",
            "type": "object",
            "additionalProperties": { "$ref": "#/definitions/trimmedText" },
            "propertyNames": { "$ref": "#/definitions/languageTag" },
            "minProperties": 1,
            "description": "A textual string specified in one or multiple languages, indexed by IETF language tag."
        },
        "simplifiedXHTML": {
            "$$target": ["common.schema.json#/definitions/simplifiedXHTML", "#/definitions/simplifiedXHTML"],
            "title": "Simplified XHTML",
            "type": "string",
            "contentMediaType": "text/xml",
            "minLength": 4,
            "allOf": [
                {
                    "$comment": "Check top-level block elements. This is imperfect and is liable to skip over tags if a <li> or nested <blockquote> is present, but fully validating XML using RegEx is impossible, and this suffices for the common case of simple formatted text.",
                    "pattern": "^(<(p|h1|h2|h3)\\s*/>|<p\\s*>([^<]|<[^p])*</p\\s*>|<h1\\s*>([^<]|<[^h])*</h1\\s*>|<h2\\s*>([^<]|<[^h])*</h2\\s*>|<h3\\s*>([^<]|<[^h])*</h3\\s*>|<ol\\s*>(<li\\s*/>|<li\\s*>.*</li\\s*>)+</ol\\s*>|<ul\\s*>(<li\\s*/>|<li\\s*>.*</li\\s*>)+</ul\\s*>|<blockquote\\s*>(<(p|h1|h2|h3)\\s*/>|<(p|h[123])\\s*>([^<]|<[^ph])*</(p|h[123])\\s*>|<ol\\s*>(<li\\s*/>|<li\\s*>.*</li\\s*>)+</ol\\s*>|<ul\\s*>(<li\\s*/>|<li\\s*>.*</li\\s*>)+</ul\\s*>|<blockquote\\s*>.+</blockquote\\s*>)+</blockquote\\s*>)+$"
                },
                {
                    "$comment": "Ensure that no invalid tags are present, check inline markup in <p> and <h#> (noting that <li> may contain pretty much anything), and prevent improper nesting of <li> tags.",
                    "pattern": "^([^<]|<(p|h[123]|a|br|strong|b|em|i)\\s*/>|</?(a|br|strong|b|em|i|blockquote)\\s*>|<(p|h[123])\\s*>([^<]|<img(\\s+(alt|src)=(\"[^<\"]*\"|'[^<']*'))+\\s*(/>|>\\s*</img\\s*>)|<a\\s+href=(\"[^<\"]+\"|'[^<']+')\\s*/?>|</?(a|br|strong|b|em|i)\\s*/?>)*</(p|h[123])\\s*>|<[ou]l\\s*>(\\s|<li\\s*/>)*<li\\s*/?>|</li\\s*>(\\s|<li\\s*/>)*(<li\\s*>|</[ou]l\\s*>))+$"
                }
            ],
            "description": "A rich text string specified in a limited subset of XHTML."
        },
        "localizedRichText": {
            "$$target": "common.schema.json#/definitions/localizedRichText",
            "title": "Localized Text",
            "type": "object",
            "additionalProperties": { "$ref": "#/definitions/simplifiedXHTML" },
            "propertyNames": { "$ref": "#/definitions/languageTag" },
            "minProperties": 1,
            "description": "A simplified XHTML string specified in one or multiple languages, indexed by IETF language tag."
        },
        "bookId": {
            "$$target": "common.schema.json#/definitions/bookId",
            "title": "Book Code",
            "type": "string",
            "pattern": "^[A-Z0-9]{3}$",
            "minLength": 3,
            "maxLength": 3,
            "enum": ["GEN", "EXO", "LEV", "NUM", "DEU", "JOS", "JDG", "RUT", "1SA", "2SA", "1KI", "2KI", "1CH", "2CH", "EZR", "NEH", "EST", "JOB", "PSA", "PRO", "ECC", "SNG", "ISA", "JER", "LAM", "EZK", "DAN", "HOS", "JOL", "AMO", "OBA", "JON", "MIC", "NAM", "HAB", "ZEP", "HAG", "ZEC", "MAL", "MAT", "MRK", "LUK", "JHN", "ACT", "ROM", "1CO", "2CO", "GAL", "EPH", "PHP", "COL", "1TH", "2TH", "1TI", "2TI", "TIT", "PHM", "HEB", "JAS", "1PE", "2PE", "1JN", "2JN", "3JN", "JUD", "REV", "TOB", "JDT", "ESG", "WIS", "SIR", "BAR", "LJE", "S3Y", "SUS", "BEL", "1MA", "2MA", "3MA", "4MA", "1ES", "2ES", "MAN", "PS2", "ODA", "PSS", "JSA", "JDB", "TBS", "SST", "DNT", "BLT", "EZA", "5EZ", "6EZ", "DAG", "PS3", "2BA", "LBA", "JUB", "ENO", "1MQ", "2MQ", "3MQ", "REP", "4BA", "LAO"],
            "description": "A standard book code consisting of three uppercase alphanumerics."
        },
        "path": {
            "$$target": "common.schema.json#/definitions/path",
            "title": "File Path",
            "type": "string",
            "pattern": "^[^\\/:?*\"><|]+(/[^\\/:?*\"><|]+)*$",
            "description": "A file path, delimited by forward slashes."
        },
        "mimeType": {
            "$$target": "common.schema.json#/definitions/mimeType",
            "title": "MIME type",
            "type": "string",
            "pattern": "^[\\-a-z0-9]+/[\\-a-z0-9+]+$",
            "description": "An IANA media type (also known as MIME type)"
        }
    }
}
